syntax = "proto2";

package bytecode;

message Program {
  repeated Type types = 1;
  repeated Function functions = 2;
}

message Type {
  enum TypeKind {
    I8 = 0;
    I16 = 1;
    I32 = 2;
    I64 = 3;
    U8 = 4;
    U16 = 5;
    U32 = 6;
    U64 = 7;
    F32 = 8;
    F64 = 9;
    Bool = 10;
    Struct = 11;
    Object = 12;
    Void = 13;
  }
  required TypeKind kind = 1;
  optional Struct struct = 2;
  optional Type elem = 3;
}

message Struct {
  required string name = 1;
  repeated Field fields = 2;
}

message Field {
  required uint64 index = 1;
  required uint64 offset = 2;
  required string name = 3;
  required Type type = 4;
}

message Value {
  required Type type = 1;
  optional int64 int_val = 2;
  optional uint64 uint_val = 3;
  optional bool bool_val = 4;
  optional fixed32 f32_val = 5;
  optional fixed64 f64_val = 6;
  optional StructValue struct_val = 7;
  optional Value elem = 8;
}

message StructValue {
  required Type type = 1;
  repeated Value values = 2;
}

message Function {
  required string name = 1;
  repeated Instruction instruction = 2;
}

message Instruction {
  enum OpCode {
    Const = 0;
    Add = 1;
    Sub = 2;
    Div = 3;
    Mul = 4;
    Mod = 5;
    Eq = 6;
    NEq = 7;
    LT = 8;
    LTEq = 9;
    GT = 10;
    GTEq = 11;
    And = 12;
    Or = 13;
    Xor = 14;
    Neg = 15;
    Not = 16;
    Alloc = 17;
    SetLoc = 18;
    GetLoc = 19;
    SetProp = 20;
    GetProp = 21;
    Jump = 22;
    JumpIfTrue = 23;
    JumpIfFalse = 24;
    Push = 25;
    Call = 26;
  }
  required OpCode op_code = 1;
  enum Variant {
    I8 = 0;
    I16 = 1;
    I32 = 2;
    I64 = 3;
    U8 = 4;
    U16 = 5;
    U32 = 6;
    U64 = 7;
    F32 = 8;
    F64 = 9;
    Bool = 10;
  }
  optional Variant variant = 2;
  optional uint64 index = 3;
  optional int64 offset = 4;
  optional Value value = 5;
}


